/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.rmowlana.avroschemaandregistry.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3665097182117088271L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.rmowlana.avroschemaandregistry.dto\",\"fields\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"customerId\",\"type\":\"string\"},{\"name\":\"productId\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"orderDate\",\"type\":\"string\"},{\"name\":\"totalPrice\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<Order>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Order to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Order from a ByteBuffer. */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence orderId;
  @Deprecated public java.lang.CharSequence customerId;
  @Deprecated public java.lang.CharSequence productId;
  @Deprecated public int quantity;
  @Deprecated public java.lang.CharSequence orderDate;
  @Deprecated public double totalPrice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param orderId The new value for orderId
   * @param customerId The new value for customerId
   * @param productId The new value for productId
   * @param quantity The new value for quantity
   * @param orderDate The new value for orderDate
   * @param totalPrice The new value for totalPrice
   */
  public Order(java.lang.CharSequence orderId, java.lang.CharSequence customerId, java.lang.CharSequence productId, java.lang.Integer quantity, java.lang.CharSequence orderDate, java.lang.Double totalPrice) {
    this.orderId = orderId;
    this.customerId = customerId;
    this.productId = productId;
    this.quantity = quantity;
    this.orderDate = orderDate;
    this.totalPrice = totalPrice;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return customerId;
    case 2: return productId;
    case 3: return quantity;
    case 4: return orderDate;
    case 5: return totalPrice;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.CharSequence)value$; break;
    case 1: customerId = (java.lang.CharSequence)value$; break;
    case 2: productId = (java.lang.CharSequence)value$; break;
    case 3: quantity = (java.lang.Integer)value$; break;
    case 4: orderDate = (java.lang.CharSequence)value$; break;
    case 5: totalPrice = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.CharSequence getOrderId() {
    return orderId;
  }

  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.CharSequence getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.CharSequence value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The value of the 'productId' field.
   */
  public java.lang.CharSequence getProductId() {
    return productId;
  }

  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(java.lang.CharSequence value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.lang.Integer getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Integer value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'orderDate' field.
   * @return The value of the 'orderDate' field.
   */
  public java.lang.CharSequence getOrderDate() {
    return orderDate;
  }

  /**
   * Sets the value of the 'orderDate' field.
   * @param value the value to set.
   */
  public void setOrderDate(java.lang.CharSequence value) {
    this.orderDate = value;
  }

  /**
   * Gets the value of the 'totalPrice' field.
   * @return The value of the 'totalPrice' field.
   */
  public java.lang.Double getTotalPrice() {
    return totalPrice;
  }

  /**
   * Sets the value of the 'totalPrice' field.
   * @param value the value to set.
   */
  public void setTotalPrice(java.lang.Double value) {
    this.totalPrice = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static com.rmowlana.avroschemaandregistry.dto.Order.Builder newBuilder() {
    return new com.rmowlana.avroschemaandregistry.dto.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static com.rmowlana.avroschemaandregistry.dto.Order.Builder newBuilder(com.rmowlana.avroschemaandregistry.dto.Order.Builder other) {
    return new com.rmowlana.avroschemaandregistry.dto.Order.Builder(other);
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static com.rmowlana.avroschemaandregistry.dto.Order.Builder newBuilder(com.rmowlana.avroschemaandregistry.dto.Order other) {
    return new com.rmowlana.avroschemaandregistry.dto.Order.Builder(other);
  }

  /**
   * RecordBuilder for Order instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    private java.lang.CharSequence orderId;
    private java.lang.CharSequence customerId;
    private java.lang.CharSequence productId;
    private int quantity;
    private java.lang.CharSequence orderDate;
    private double totalPrice;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.rmowlana.avroschemaandregistry.dto.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productId)) {
        this.productId = data().deepCopy(fields()[2].schema(), other.productId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[4].schema(), other.orderDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[5].schema(), other.totalPrice);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(com.rmowlana.avroschemaandregistry.dto.Order other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productId)) {
        this.productId = data().deepCopy(fields()[2].schema(), other.productId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[4].schema(), other.orderDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[5].schema(), other.totalPrice);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return orderId;
    }

    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerId() {
      return customerId;
    }

    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder setCustomerId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.customerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductId() {
      return productId;
    }

    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder setProductId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.productId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.lang.Integer getQuantity() {
      return quantity;
    }

    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder setQuantity(int value) {
      validate(fields()[3], value);
      this.quantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder clearQuantity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrderDate() {
      return orderDate;
    }

    /**
      * Sets the value of the 'orderDate' field.
      * @param value The value of 'orderDate'.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder setOrderDate(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.orderDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'orderDate' field has been set.
      * @return True if the 'orderDate' field has been set, false otherwise.
      */
    public boolean hasOrderDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'orderDate' field.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder clearOrderDate() {
      orderDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPrice' field.
      * @return The value.
      */
    public java.lang.Double getTotalPrice() {
      return totalPrice;
    }

    /**
      * Sets the value of the 'totalPrice' field.
      * @param value The value of 'totalPrice'.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder setTotalPrice(double value) {
      validate(fields()[5], value);
      this.totalPrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPrice' field has been set.
      * @return True if the 'totalPrice' field has been set, false otherwise.
      */
    public boolean hasTotalPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'totalPrice' field.
      * @return This builder.
      */
    public com.rmowlana.avroschemaandregistry.dto.Order.Builder clearTotalPrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.customerId = fieldSetFlags()[1] ? this.customerId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.productId = fieldSetFlags()[2] ? this.productId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.quantity = fieldSetFlags()[3] ? this.quantity : (java.lang.Integer) defaultValue(fields()[3]);
        record.orderDate = fieldSetFlags()[4] ? this.orderDate : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.totalPrice = fieldSetFlags()[5] ? this.totalPrice : (java.lang.Double) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
